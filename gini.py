# -*- coding: utf-8 -*-
"""gini.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w2frZ-EaGZccI0kTOXpngcoagAQ7ebBs
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

file_path = "/content/drive/MyDrive/dataset.xlsx"
Orginal_data = pd.read_excel(file_path)

Orginal_data

data=Orginal_data[['area', 'subarea', 'country', 'interpolated', 'region_wb', 'year', 'population', 'gdp', 'gini', 'palma', 'p1', 'p2', 'p3', 'p4']]

data

data.isnull().sum()

sns.boxplot(data.population)

data.population.median()

data.population.fillna(data.population.median(),inplace=True)

data.isnull().sum()

sns.boxplot(data.gdp)

data.gdp.fillna(data.gdp.median(),inplace=True)

data.isnull().sum()

sns.boxplot(data.gini)

data.gini.fillna(data.gini.median(),inplace=True)

data.isnull().sum()

sns.boxplot(data.palma)

data.palma.fillna(data.palma.median(),inplace=True)

data.isnull().sum()

sns.boxplot(data.p1)

data.p1.fillna(data.p1.median(),inplace=True)

data.isnull().sum()

data.isnull().sum()

data.p2.fillna(data.p2.median(),inplace=True)

data.isnull().sum()

sns.boxplot(data.p3)

data.p3.fillna(data.p3.median(),inplace=True)

data.isnull().sum()

sns.boxplot(data.p4)

data.p4.fillna(data.p4.median(),inplace=True)

data.isnull().sum()

data.interpolated.fillna(data.interpolated.mode()[0],inplace=True)

data.isnull().sum()

data.region_wb.fillna(data.region_wb.mode()[0],inplace=True)

data.isnull().sum()

from sklearn.preprocessing import LabelEncoder

encoder=LabelEncoder()

data.area=encoder.fit_transform(data.area)

data

data.subarea=encoder.fit_transform(data.subarea)

data.country=encoder.fit_transform(data.country)

data.interpolated=encoder.fit_transform(data.interpolated)

data.region_wb=encoder.fit_transform(data.region_wb)

data

from sklearn.preprocessing import StandardScaler

scaler=StandardScaler()

data.population.shape

x=data.drop("gini",axis=1)
y=data[['gini']]

clms=x.columns

scaled=scaler.fit_transform(x)

X=pd.DataFrame(scaled,columns=clms)

# Selecting relevant features and target variable
selected_features = ['country','year','area', 'subarea', 'interpolated', 'region_wb', 'population', 'gdp', 'palma', 'p1', 'p2', 'p3', 'p4']  # Include the encoded column

X = data[selected_features]  # Features
y = data['gini']  # Target variable

X

y

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Assuming X and y are your feature matrix and target variable
# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=20)

# Initialize and train the model (Example: Decision Tree Regressor)
model = DecisionTreeRegressor()

model.fit(X_train, y_train)

# Predict on the test set
y_pred = model.predict(X_test)

# Evaluate model performance
mse = mean_squared_error(y_test, y_pred)
r_squared = r2_score(y_test, y_pred)
print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r_squared}')

# Assuming you have processed values for the encoded country and processed year
processed_country_value =0  # Replace with the processed value for the country
processed_year_value =13  # Replace with the processed value for the year
a=218
b=0
c=0
d=1950
e=2.536165e+09
f=4031.34
g=15.721
h=0.001980
i=0.006238
j=0.006238
k=0.012780

# Ensure the processed values are numerical and compatible with model prediction
try:
    # Use your SVR model to predict the Gini Index using only country and year
    prediction = model.predict([[processed_country_value, processed_year_value,a,b,c,d,e,f,g,h,i,j,k]])
    print(f"Predicted Gini Index for the encoded country : {prediction}")
except Exception as e:
    print(f"Error: {e}")

data

import pickle

# Assuming 'model' is your trained scikit-learn model
model_filename = 'gini.pkl'
with open(model_filename, 'wb') as file:
    pickle.dump(model, file)